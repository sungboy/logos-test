#summary 프로젝트 2 관련

= 할일과 설명 =
== 가. timer_sleep을 타이머 인터럽트를 사용하도록 변경 ==
<br>  1) timer.c, thread.c(특정함수에서 처리요?) 연관
<br>  2) 기다리는 쓰레드 관리는 리스트로?
== 나. 스케줄러 구현 ==
<br>  1) 중요 키워드 : preemption, priority, 가변 Slice, 우선순위 역전은 고려할 필요 없음
<br>  2) thrad 관련 함수 목록을 보면서 특정 함수가 변경에서 누락되지 않도록 유의
<br>  3) 비트맵 구현
<br>   가) 구글에서 fls 검색 조교님 권장, 프로젝트 설명 자료 참고에도 뭔가 주소 있음
<br>   나) 그러나 Pintos 것 사용이 더 좋을 듯? 
<br>   (단 이해해야, 프로젝트 설명의 구현방식 1, 2, 3 중 2, 3인지 확인해야)
<br>   (문서에서 fixed size라고 하는데 문제 없을 듯...? )
== 다. O(1) 스케줄러 (증명) 테스트셋 작성 ==
<br>  1) 인터넷 검색을 통한 O(1) 스케줄러 (증명) 테스트셋 작성 기법 확인
<br>  2) 해당 기법에 따른 테스트 셋 코드 작성
<br>  3) 예상에 많은 스레드를 띄워서 테스트해야 할 듯? 
== 라. 문서화 ==
<br>  1) 기본적으로 본인이 코딩한 부분은 본인이 작성
<br>  2) 목차 및 각 목차 항목 별 분량, 필 포함 내용 논의 후 각자 작성, 취합
= 업무 분장 =
조항준 - (나. 스케줄러 구현) - (비트맵)
<br>박동민 - 가, 다 + 비트맵
<br>문서화는 추후 논의 후 결정
= Pintos Bitmap 분석 결과 설명(박동민) =
== 개요 ==
  * Pintos의 Bitmap 코드는 lib/kernel/bitmap.c, lib/kernel/bitmap.h에 존재
  * 프로젝트 설명 문서의 3가지 방법 중 2번으로 구현됨(일부 어셈블리 명령과 Generic Bit Operation 혼합)
  * 프로젝트 설명 문서에는 set_bit(), clear_bit(), find_first_bit()의 기능을 하는 3가지 주요 함수가 구현되어야 한다고 되어 있고 Pintos 구현에서는 해당 기능을 수행하기 위해 각각 bitmap_mark, bitmap_reset, bitmap_scan 함수를 사용하면 됨
== 전반적인 사용 흐름 ==
{{{
//생성
<br>struct bitmap'*' bm = bitmap_create( (할당할 비트 수) ); // 할당 후 모든 비트는 0으로 초기화
<br>
<br>//값 변경
<br>//// 특정 비트를 0으로 변경
<br>bitmap_reset(bm, (비트 인덱스(예를 들어 0이면 첫번째 비트, 1이면 두번째 비트 등)) );
<br>//// 특정 비트를 1로 변경
<br>bitmap_mark(bm, (비트 인덱스)) );
<br>//// 기타 여러 비트 변경 등의 함수가 있으나 불필요할 듯하여 생략함
<br>//// 필요 시 추가요구 바람
<br>
<br>//가장 먼저 1로 설정된 비트 알아내기

<br>size_t bitmap_scan (const struct bitmap *, size_t start, size_t cnt, bool);

<br>//해제
<br>bitmap_destroy(bm);
}}}